apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx
data:
  # Adding new entries here will make them appear as files in the deployment.
  nginx.conf: |
    worker_processes 5;

    events {
    }

    http {
      # Compression
      gzip              on;
      gzip_vary         on;
      gzip_disable      msie6;
      gzip_proxied      any;
      gzip_http_version 1.0;
      gzip_min_length   256;

      # Certs for all SSL server_names.
      ssl_certificate     /certs/tls.crt;
      ssl_certificate_key /certs/tls.key;

      # SSL Session cache
      ssl_session_cache   shared:SSL:10m;
      ssl_session_timeout 18h;

      # Proxy settings
      proxy_http_version      1.1;
      proxy_next_upstream     error timeout http_500 http_502 http_503 http_504;
      proxy_ssl_name          $server_name;
      proxy_ssl_server_name   on;
      proxy_ssl_session_reuse on;
      proxy_ssl_verify_depth  3;

      # Cache settings
      proxy_cache_path              /cache levels=1:2 keys_zone=cache:10m use_temp_path=off;
      proxy_cache_key               $scheme$server_name$request_uri;
      proxy_cache_use_stale         updating error timeout http_500 http_502 http_503 http_504;
      proxy_cache_background_update on;

      # This is the main site.
      #
      # Upgrade HTTP to HTTPS.
      server {
        server_name preliminary.istio.io;
        listen 80;

        location = /_healthz {
          add_header Content-Type text/plain;
          return 200 "ok\n";
        }

        location / {
          return 301 https://$server_name$request_uri;
        }
      }

      # Handle HTTPS.
      upstream github {
        server    istio.github.io:443;
        keepalive 10;
      }

      server {
        server_name preliminary.istio.io;
        listen 443 ssl http2;

        location = /_healthz {
          add_header Content-Type text/plain;
          return 200 "ok\n";
        }

        # Proxy to the real site.
        # We set the host to the vanity domain `preliminary.istio.io` but proxy to
        # `istio.github.io` so that any relative redirects it generates on
        # the github side are to the vanity domain.  DNS points the vanity
        # domain at this nginx.
        location / {
          proxy_set_header Host preliminary.istio.io;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $remote_addr;
          proxy_set_header Connection "";

          proxy_ssl_name   istio.github.io;
          proxy_pass       https://github;

          proxy_ssl_verify on;
          proxy_ssl_trusted_certificate /cacerts/DigiCertHighAssuranceEVRootCA.pem;

          add_header       X-Cache-Status $upstream_cache_status;
          proxy_cache      off;
          # NGINX-based GitHub Pages don't update Expires header during
          # cache revalidation, so we have to ignore it, otherwise we're
          # going to treat most of the responses as uncacheable.
          proxy_ignore_headers Expires;
        }
      }

      # Make sure www.istio.io redirects to istio.io. This should be
      # handled by DNS and proper website URLs, but handle at proxy as
      # fallback.
      server {
          listen 80;
          listen 443 ssl http2;
          server_name www.istio.io;
          return 301 https://istio.io$request_uri;
      }

      server {
        server_name istio.io;
        listen 80;

        location = /_healthz {
          add_header Content-Type text/plain;
          return 200 "ok\n";
        }

        location / {
          return 301 https://$server_name$request_uri;
        }
      }

      # Handle HTTPS.
      upstream current_istio_io {
        server    current-istio-io.firebaseapp.com:443;
        keepalive 10;
      }

      server {
        server_name istio.io;
        listen 443 ssl http2;

        if ($arg_go-get = "1") {
          # This is a go-get operation.
          # Send any file in any repo to static content.
          rewrite ^/([^/]*)(/.*)?$  /_golang-go-get/$1.html;
        }

        location /_golang-go-get {
          # Serve static content.
          alias /www/golang;
        }

        location = /_healthz {
          add_header Content-Type text/plain;
          return 200 "ok\n";
        }

        # Proxy to the real site.
        location / {
          proxy_set_header Host current-istio-io.firebaseapp.com;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $remote_addr;
          proxy_set_header Connection "";

          proxy_ssl_name   current-istio-io.firebaseapp.com;
          proxy_pass       https://current_istio_io;

          proxy_ssl_verify on;
          proxy_ssl_trusted_certificate /cacerts/pki_google_roots.pem;

          add_header       X-Cache-Status $upstream_cache_status;
          proxy_cache      off;
        }
      }

      # gcsweb.istio.io
      # Upgrade HTTP to HTTPS
      server {
        server_name gcsweb.istio.io;
        listen 80;

        location = /_healthz {
          add_header Content-Type text/plain;
          return 200 "ok\n";
        }

        return 301 https://$server_name$request_uri;
      }

      # Handle HTTPS.
      upstream gcsweb {
              server    gcsweb.default.svc.cluster.local:80;
        keepalive 10;
      }

      server {
        server_name gcsweb.istio.io;
        listen 443 ssl http2;

        location = /_healthz {
          add_header Content-Type text/plain;
          return 200 "ok\n";
        }

        location / {
          proxy_set_header Host gcsweb.istio.io;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $remote_addr;
          proxy_set_header Connection "";
          proxy_pass       http://gcsweb;

          add_header       X-Cache-Status $upstream_cache_status;
          proxy_cache      off;
        }
      }

      # velodrome.istio.io
      # Upgrade HTTP to HTTPS
      server {
        server_name velodrome.istio.io;
        listen 80;

        location = /_healthz {
          add_header Content-Type text/plain;
          return 200 "ok\n";
        }

        return 301 https://$server_name$request_uri;
      }

      # Handle HTTPS.
      upstream velodrome {
        server    130.211.224.127:80;
        keepalive 10;
      }

      server {
        server_name velodrome.istio.io;
        listen 443 ssl http2;

        location = /_healthz {
          add_header Content-Type text/plain;
          return 200 "ok\n";
        }

        location / {
          proxy_set_header Host velodrome.istio.io;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $remote_addr;
          proxy_set_header Connection "";
          proxy_pass       http://velodrome;

          add_header       X-Cache-Status $upstream_cache_status;
          proxy_cache      off;
        }
      }

      # prow.istio.io
      # Upgrade HTTP to HTTPS
      server {
        server_name prow.istio.io;
        listen 80;

        location = /_healthz {
          add_header Content-Type text/plain;
          return 200 "ok\n";
        }

        return 301 https://$server_name$request_uri;
      }

      # Handle HTTPS.
      upstream prow {
        server    35.190.0.30:80;
        keepalive 10;
      }

      server {
        server_name prow.istio.io;
        listen 443 ssl http2;

        location = /_healthz {
          add_header Content-Type text/plain;
          return 200 "ok\n";
        }

        location / {
          proxy_set_header Host prow.istio.io;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $remote_addr;
          proxy_set_header Connection "";
          proxy_pass       http://prow;

          add_header       X-Cache-Status $upstream_cache_status;
          proxy_cache      off;
        }
      }

      # return 404 for any unknown servers (i.e. subdomains).
      server {
          listen 80 default_server;
          listen 443 ssl http2 default_server;
          server_name _;
          return 404;
      }
    }
